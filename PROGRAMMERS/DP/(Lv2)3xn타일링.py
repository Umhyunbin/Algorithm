def solution(n):
    """
    0. dp[0] = 1 (0! == 1 인 것처럼 아무것도 없는 것도 하나의 케이스로 치자.)
    1. 3 * n 를 넓이 2 사각형으로 채우기 위해서는 n은 무조건 짝수 -> n // 2 == i 로 생각.
    2. dp[i - 1] 에서 dp[i]로 넘어가는 과정에서 나올 수 있는 경우는 3가지(위 ㅡ, 아래 ㅡ, 전부 ㅡ) -> 깔끔한 케이스
       그 외에 dp[i - 2]부터는 깔끔하지 않은 케이스를 2개씩 채울 수 있음(양 끝에 | 있고 사이가 전부 ㅡ로 채워진 케이스, 바닥도 ㅡ)     
       -> dp[i] = 3 * dp[i - 1] + 2 * dp[i - 2] + 2 * dp[i - 3] + ... + 2 * dp[0]
       ->       = 3 * dp[i - 1] + 3 * dp[i - 2] + 2 * dp[i - 3] + ... + 2 * dp[0] - dp[i - 2]
       ->       = 3 * dp[i - 1] + dp[i - 1] - dp[i - 2] (dp[i - 1] = 3 * dp[i - 2] + 2 * dp[i - 3] + ...)
       ->       = 4 * dp[i - 1] - dp[i - 2]
    """
    MAX_NUM = 5001
    DIVISOR = 1000000007
    
    dp = [1] * MAX_NUM
    dp[1] = 3
    
    for i in range(2, n // 2 + 1):
        v = (4 * dp[i - 1] - dp[i - 2]) % DIVISOR
        dp[i] = v if v > 0 else v + DIVISOR
    return dp[n // 2]
